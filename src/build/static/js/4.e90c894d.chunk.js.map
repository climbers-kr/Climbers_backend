{"version":3,"sources":["components/common/AskModal.js","components/auth/register/SecondStepForm.js"],"names":["FullScreen","styled","div","AskModalBlock","StyledButton","Button","AskModal","visible","title","description","confirmText","cancelText","onConfirm","onCancel","className","onClick","SecondStepForm","onChange","form","onRepeatRequestPhoneAuth","onChangeNumberButtonClick","onSubmitValidationCode","changeNumber","classes","error","React","useState","modalVisible","setModalVisible","Typography","helpText","variant","margin","required","fullWidth","name","label","type","autoComplete","id","autoFocus","value","phone","ErrorMessage","color","onSubmit","validationCode","repeatButton","e","Grid","container","gridButtonBox","item","xs","Timer","timer","setTimer","intervals","intervalId","useRef","useEffect","current","validationCodeTimer","Interval","setInterval","distance","Date","getTime","minutes","Math","floor","seconds","toString","slice","clearInterval"],"mappings":"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","file":"static/js/4.e90c894d.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst FullScreen=styled.div`\r\n    position: fixed;\r\n    z-index: 30;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    background: rgba(0, 0, 0, 0.25);\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n`;\r\n\r\nconst AskModalBlock=styled.div`\r\n    width: 320px;\r\n    background: white;\r\n    padding: 1.5rem;\r\n    border-radius: 4px;\r\n    box-shadow: 0px 0px 8px rgba(0, 0, 0, 0.125);\r\n    h2{\r\n        margin-top: 0;\r\n        margin-bottom: 1rem;\r\n    }\r\n    \r\n    p{\r\n        margin-bottom: 3rem;\r\n    }\r\n    .buttons{\r\n        display: flex;\r\n        justify-content: flex-end;\r\n    }\r\n`;\r\n\r\nconst StyledButton=styled(Button)`\r\n    height: 2rem;\r\n    &+&{\r\n        margin-left: 0.75rem;\r\n    }\r\n`;\r\n\r\nconst AskModal=({\r\n    visible,\r\n    title,\r\n    description,\r\n    confirmText='확인',\r\n    cancelText='취소',\r\n    onConfirm,\r\n    onCancel,\r\n})=>{\r\n    if(!visible) return null;\r\n\r\n    return (\r\n        <FullScreen>\r\n            <AskModalBlock>\r\n                <h2>{title}</h2>\r\n                <p>{description}</p>\r\n                <div className=\"buttons\">\r\n                    <StyledButton onClick={onCancel}>{cancelText}</StyledButton>\r\n                    <StyledButton onClick={onConfirm}>\r\n                        {confirmText}\r\n                    </StyledButton>\r\n                </div>\r\n            </AskModalBlock>\r\n        </FullScreen>\r\n    );\r\n};\r\n\r\nexport default AskModal;","import Typography from \"@material-ui/core/Typography\";\r\nimport TextField from \"@material-ui/core/TextField/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport React, {useEffect} from \"react\";\r\nimport AskModal from \"../../common/AskModal\";\r\nimport ErrorMessage from \"../ErrorMessage\";\r\n\r\nexport default function SecondStepForm(\r\n    {\r\n        onChange,\r\n        form,\r\n        onRepeatRequestPhoneAuth,\r\n        onChangeNumberButtonClick,\r\n        onSubmitValidationCode,\r\n        changeNumber,\r\n        classes,\r\n        error\r\n    }) {\r\n    const [modalVisible, setModalVisible]=React.useState(false);\r\n    const onRepeatRequestClick=(e)=>{\r\n        setModalVisible(true);\r\n    };\r\n    const onCancel=()=>{\r\n        setModalVisible(false);\r\n    };\r\n    const onConfirm=()=>{\r\n        setModalVisible(false);\r\n        onRepeatRequestPhoneAuth();\r\n    };\r\n    return (\r\n        <>\r\n            {!changeNumber ? (\r\n                <form className={classes.form} onSubmit={onSubmitValidationCode}>\r\n                    <Typography className={classes.helpText} variant=\"h6\">\r\n                        문자 메시지로 전송된 코드를 입력하세요\r\n                    </Typography>\r\n                    <Timer form={form} classes={classes} />\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"email\"\r\n                        label=\"인증번호\"\r\n                        name=\"validationCode\"\r\n                        autoFocus\r\n                        type=\"number\"\r\n                        onChange={onChange}\r\n                        value={form.validationCode}\r\n                    />\r\n                    <Button\r\n                        color=\"primary\"\r\n                        className={classes.repeatButton}\r\n                        onClick={onRepeatRequestClick}\r\n                    >\r\n                        인증 코드 재전송\r\n                    </Button>\r\n                    {error && <ErrorMessage>{error}</ErrorMessage>}\r\n                    <Grid container className={classes.gridButtonBox}>\r\n                        <Grid item xs={4}>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                fullWidth\r\n                                type=\"submit\"\r\n                            >\r\n                                다음\r\n                            </Button>\r\n                        </Grid>\r\n                        <Grid item xs={8}>\r\n                            <Button\r\n                                fullWidth\r\n                                variant=\"contained\"\r\n                                onClick={onChangeNumberButtonClick}>\r\n                                전화번호 업데이트\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <AskModal\r\n                        visible={modalVisible}\r\n                        onConfirm={onConfirm}\r\n                        onCancel={onCancel}\r\n                        title=\"인증번호 재요청\"\r\n                        description=\"인증번호를 재요청 하시겠습니까?\"\r\n                    />\r\n                </form>\r\n            ) : (\r\n                <>\r\n                    <Typography className={classes.helpText} variant=\"h6\">\r\n                        휴대폰 번호 변경\r\n                    </Typography>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        name=\"phone\"\r\n                        label=\"전화번호\"\r\n                        type=\"tel\"\r\n                        autoComplete=\"phone\"\r\n                        id=\"phone\"\r\n                        autoFocus\r\n                        onChange={onChange}\r\n                        value={form.phone}\r\n                    />\r\n                    {error && <ErrorMessage>{error}</ErrorMessage>}\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        fullWidth\r\n                        onClick={onChangeNumberButtonClick}\r\n                    >\r\n                        변경\r\n                    </Button>\r\n                </>\r\n            )}\r\n\r\n        </>\r\n    )\r\n};\r\nconst Timer=({form, classes})=>{\r\n    //sms 인증번호 timeout 설정\r\n    const [timer, setTimer]=React.useState('');\r\n    const intervals = {};\r\n    const intervalId=React.useRef(0);\r\n    useEffect(()=> {\r\n        intervalId.current++;\r\n        if(form.validationCodeTimer) {\r\n            const Interval=setInterval(()=>{\r\n                intervals[intervalId]=Interval;\r\n\r\n                const distance = 1000*60*5 - (new Date().getTime()-form.validationCodeTimer);\r\n                const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\r\n                const seconds = ('0'+ Math.floor((distance % (1000 * 60)) / 1000).toString()).slice(-2);\r\n\r\n                setTimer(`${minutes}:${seconds}`);\r\n\r\n                if(distance < 0){\r\n                    clearInterval(Interval);\r\n                    setTimer('인증 시간 초과');\r\n                }\r\n            }, 1000)\r\n        }\r\n        return () => {\r\n            clearInterval(intervals[intervalId]);\r\n        };\r\n    }, [form.validationCodeTimer]);\r\n    return (\r\n        <Typography className={classes.timer} variant=\"inherit\">\r\n            {timer}\r\n        </Typography>\r\n    )\r\n};"],"sourceRoot":""}